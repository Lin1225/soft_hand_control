// Generated by gencpp from file qb_device_msgs/StateStamped.msg
// DO NOT EDIT!


#ifndef QB_DEVICE_MSGS_MESSAGE_STATESTAMPED_H
#define QB_DEVICE_MSGS_MESSAGE_STATESTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <qb_device_msgs/Info.h>
#include <qb_device_msgs/State.h>

namespace qb_device_msgs
{
template <class ContainerAllocator>
struct StateStamped_
{
  typedef StateStamped_<ContainerAllocator> Type;

  StateStamped_()
    : header()
    , device_info()
    , device_data()  {
    }
  StateStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , device_info(_alloc)
    , device_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::qb_device_msgs::Info_<ContainerAllocator>  _device_info_type;
  _device_info_type device_info;

   typedef  ::qb_device_msgs::State_<ContainerAllocator>  _device_data_type;
  _device_data_type device_data;





  typedef boost::shared_ptr< ::qb_device_msgs::StateStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qb_device_msgs::StateStamped_<ContainerAllocator> const> ConstPtr;

}; // struct StateStamped_

typedef ::qb_device_msgs::StateStamped_<std::allocator<void> > StateStamped;

typedef boost::shared_ptr< ::qb_device_msgs::StateStamped > StateStampedPtr;
typedef boost::shared_ptr< ::qb_device_msgs::StateStamped const> StateStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qb_device_msgs::StateStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qb_device_msgs::StateStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qb_device_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'qb_device_msgs': ['/home/iclab/softhand_ros/src/qbdevice-ros/qb_device_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_msgs::StateStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_device_msgs::StateStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_msgs::StateStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d5502db1c5e02c9760e14892ed57aee";
  }

  static const char* value(const ::qb_device_msgs::StateStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d5502db1c5e02c9ULL;
  static const uint64_t static_value2 = 0x760e14892ed57aeeULL;
};

template<class ContainerAllocator>
struct DataType< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qb_device_msgs/StateStamped";
  }

  static const char* value(const ::qb_device_msgs::StateStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# State message with stamped info valid for either qbhand or qbmove\n\
\n\
std_msgs/Header header\n\
\n\
qb_device_msgs/Info device_info\n\
\n\
qb_device_msgs/State device_data\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: qb_device_msgs/Info\n\
# Standard device-independent info message\n\
\n\
int32 id\n\
string serial_port\n\
int32 max_repeats\n\
bool get_positions\n\
bool get_currents\n\
bool get_distinct_packages\n\
bool set_commands\n\
bool set_commands_async\n\
int32[] position_limits\n\
int32[] encoder_resolutions\n\
================================================================================\n\
MSG: qb_device_msgs/State\n\
# State message valid for either qbhand or qbmove\n\
\n\
# either qbhand or qbmove:\n\
#  - motors: position, command in [ticks], velocity in [ticks/s], effort in [mA]\n\
qb_device_msgs/ResourceData[] actuators\n\
\n\
# qbhand:\n\
#  - closure: position, command in [0,1], velocity in [percent/s],  effort in [A].\n\
# qbmove:\n\
#  - shaft: position, command in [radians], velocity in [radians/s], effort in [A];\n\
#  - preset: position, command in [0,1], velocity in [percent/s], effort is not used.\n\
qb_device_msgs/ResourceData[] joints\n\
\n\
# Reliability of the retrieved measurements\n\
bool is_reliable\n\
int32 consecutive_failures\n\
================================================================================\n\
MSG: qb_device_msgs/ResourceData\n\
# Device-independent resource data message\n\
\n\
string name\n\
float64 position\n\
float64 velocity\n\
float64 effort\n\
float64 command\n\
";
  }

  static const char* value(const ::qb_device_msgs::StateStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.device_info);
      stream.next(m.device_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qb_device_msgs::StateStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qb_device_msgs::StateStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "device_info: ";
    s << std::endl;
    Printer< ::qb_device_msgs::Info_<ContainerAllocator> >::stream(s, indent + "  ", v.device_info);
    s << indent << "device_data: ";
    s << std::endl;
    Printer< ::qb_device_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.device_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QB_DEVICE_MSGS_MESSAGE_STATESTAMPED_H

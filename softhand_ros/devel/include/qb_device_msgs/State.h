// Generated by gencpp from file qb_device_msgs/State.msg
// DO NOT EDIT!


#ifndef QB_DEVICE_MSGS_MESSAGE_STATE_H
#define QB_DEVICE_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <qb_device_msgs/ResourceData.h>
#include <qb_device_msgs/ResourceData.h>

namespace qb_device_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : actuators()
    , joints()
    , is_reliable(false)
    , consecutive_failures(0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : actuators(_alloc)
    , joints(_alloc)
    , is_reliable(false)
    , consecutive_failures(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::qb_device_msgs::ResourceData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qb_device_msgs::ResourceData_<ContainerAllocator> >::other >  _actuators_type;
  _actuators_type actuators;

   typedef std::vector< ::qb_device_msgs::ResourceData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qb_device_msgs::ResourceData_<ContainerAllocator> >::other >  _joints_type;
  _joints_type joints;

   typedef uint8_t _is_reliable_type;
  _is_reliable_type is_reliable;

   typedef int32_t _consecutive_failures_type;
  _consecutive_failures_type consecutive_failures;





  typedef boost::shared_ptr< ::qb_device_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qb_device_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::qb_device_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::qb_device_msgs::State > StatePtr;
typedef boost::shared_ptr< ::qb_device_msgs::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qb_device_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qb_device_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qb_device_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'qb_device_msgs': ['/home/iclab/softhand_ros/src/qbdevice-ros/qb_device_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_device_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_device_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_device_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_device_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qb_device_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "035992012f0af1c782c17a0f8f6e544c";
  }

  static const char* value(const ::qb_device_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x035992012f0af1c7ULL;
  static const uint64_t static_value2 = 0x82c17a0f8f6e544cULL;
};

template<class ContainerAllocator>
struct DataType< ::qb_device_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qb_device_msgs/State";
  }

  static const char* value(const ::qb_device_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qb_device_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# State message valid for either qbhand or qbmove\n\
\n\
# either qbhand or qbmove:\n\
#  - motors: position, command in [ticks], velocity in [ticks/s], effort in [mA]\n\
qb_device_msgs/ResourceData[] actuators\n\
\n\
# qbhand:\n\
#  - closure: position, command in [0,1], velocity in [percent/s],  effort in [A].\n\
# qbmove:\n\
#  - shaft: position, command in [radians], velocity in [radians/s], effort in [A];\n\
#  - preset: position, command in [0,1], velocity in [percent/s], effort is not used.\n\
qb_device_msgs/ResourceData[] joints\n\
\n\
# Reliability of the retrieved measurements\n\
bool is_reliable\n\
int32 consecutive_failures\n\
================================================================================\n\
MSG: qb_device_msgs/ResourceData\n\
# Device-independent resource data message\n\
\n\
string name\n\
float64 position\n\
float64 velocity\n\
float64 effort\n\
float64 command\n\
";
  }

  static const char* value(const ::qb_device_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qb_device_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actuators);
      stream.next(m.joints);
      stream.next(m.is_reliable);
      stream.next(m.consecutive_failures);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qb_device_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qb_device_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "actuators[]" << std::endl;
    for (size_t i = 0; i < v.actuators.size(); ++i)
    {
      s << indent << "  actuators[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qb_device_msgs::ResourceData_<ContainerAllocator> >::stream(s, indent + "    ", v.actuators[i]);
    }
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qb_device_msgs::ResourceData_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
    s << indent << "is_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_reliable);
    s << indent << "consecutive_failures: ";
    Printer<int32_t>::stream(s, indent + "  ", v.consecutive_failures);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QB_DEVICE_MSGS_MESSAGE_STATE_H

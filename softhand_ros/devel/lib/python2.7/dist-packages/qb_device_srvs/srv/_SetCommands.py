# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_srvs/SetCommandsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetCommandsRequest(genpy.Message):
  _md5sum = "0ed52285e2ef154a04295dd634f128ae"
  _type = "qb_device_srvs/SetCommandsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 id
int32 max_repeats
bool set_commands
bool set_commands_async
int16[] commands
"""
  __slots__ = ['id','max_repeats','set_commands','set_commands_async','commands']
  _slot_types = ['int32','int32','bool','bool','int16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,max_repeats,set_commands,set_commands_async,commands

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetCommandsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.max_repeats is None:
        self.max_repeats = 0
      if self.set_commands is None:
        self.set_commands = False
      if self.set_commands_async is None:
        self.set_commands_async = False
      if self.commands is None:
        self.commands = []
    else:
      self.id = 0
      self.max_repeats = 0
      self.set_commands = False
      self.set_commands_async = False
      self.commands = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2B().pack(_x.id, _x.max_repeats, _x.set_commands, _x.set_commands_async))
      length = len(self.commands)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.commands))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.max_repeats, _x.set_commands, _x.set_commands_async,) = _get_struct_2i2B().unpack(str[start:end])
      self.set_commands = bool(self.set_commands)
      self.set_commands_async = bool(self.set_commands_async)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.commands = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2B().pack(_x.id, _x.max_repeats, _x.set_commands, _x.set_commands_async))
      length = len(self.commands)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.commands.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.max_repeats, _x.set_commands, _x.set_commands_async,) = _get_struct_2i2B().unpack(str[start:end])
      self.set_commands = bool(self.set_commands)
      self.set_commands_async = bool(self.set_commands_async)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.commands = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2B = None
def _get_struct_2i2B():
    global _struct_2i2B
    if _struct_2i2B is None:
        _struct_2i2B = struct.Struct("<2i2B")
    return _struct_2i2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_srvs/SetCommandsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetCommandsResponse(genpy.Message):
  _md5sum = "45434ccc588901681d58dcbb05939d8a"
  _type = "qb_device_srvs/SetCommandsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool success
int32 failures
"""
  __slots__ = ['success','failures']
  _slot_types = ['bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,failures

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetCommandsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.failures is None:
        self.failures = 0
    else:
      self.success = False
      self.failures = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.failures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.failures,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.failures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.failures,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
class SetCommands(object):
  _type          = 'qb_device_srvs/SetCommands'
  _md5sum = '2a24c554c16e33a4da324c504c12f0f4'
  _request_class  = SetCommandsRequest
  _response_class = SetCommandsResponse

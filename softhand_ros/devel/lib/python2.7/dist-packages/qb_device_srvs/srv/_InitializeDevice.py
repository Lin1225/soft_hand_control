# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_srvs/InitializeDeviceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InitializeDeviceRequest(genpy.Message):
  _md5sum = "d69fcec3a38c9f637f3b8a74cff24b49"
  _type = "qb_device_srvs/InitializeDeviceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 id
bool activate
bool rescan
int32 max_repeats
"""
  __slots__ = ['id','activate','rescan','max_repeats']
  _slot_types = ['int32','bool','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,activate,rescan,max_repeats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitializeDeviceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.activate is None:
        self.activate = False
      if self.rescan is None:
        self.rescan = False
      if self.max_repeats is None:
        self.max_repeats = 0
    else:
      self.id = 0
      self.activate = False
      self.rescan = False
      self.max_repeats = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2Bi().pack(_x.id, _x.activate, _x.rescan, _x.max_repeats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.activate, _x.rescan, _x.max_repeats,) = _get_struct_i2Bi().unpack(str[start:end])
      self.activate = bool(self.activate)
      self.rescan = bool(self.rescan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2Bi().pack(_x.id, _x.activate, _x.rescan, _x.max_repeats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.activate, _x.rescan, _x.max_repeats,) = _get_struct_i2Bi().unpack(str[start:end])
      self.activate = bool(self.activate)
      self.rescan = bool(self.rescan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2Bi = None
def _get_struct_i2Bi():
    global _struct_i2Bi
    if _struct_i2Bi is None:
        _struct_i2Bi = struct.Struct("<i2Bi")
    return _struct_i2Bi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_srvs/InitializeDeviceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qb_device_msgs.msg

class InitializeDeviceResponse(genpy.Message):
  _md5sum = "8ca8d9ac609becacaeb0eb6f956dfdcc"
  _type = "qb_device_srvs/InitializeDeviceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool success
int32 failures
string message
qb_device_msgs/Info info

================================================================================
MSG: qb_device_msgs/Info
# Standard device-independent info message

int32 id
string serial_port
int32 max_repeats
bool get_positions
bool get_currents
bool get_distinct_packages
bool set_commands
bool set_commands_async
int32[] position_limits
int32[] encoder_resolutions"""
  __slots__ = ['success','failures','message','info']
  _slot_types = ['bool','int32','string','qb_device_msgs/Info']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,failures,message,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitializeDeviceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.failures is None:
        self.failures = 0
      if self.message is None:
        self.message = ''
      if self.info is None:
        self.info = qb_device_msgs.msg.Info()
    else:
      self.success = False
      self.failures = 0
      self.message = ''
      self.info = qb_device_msgs.msg.Info()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.failures))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.info.id))
      _x = self.info.serial_port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i5B().pack(_x.info.max_repeats, _x.info.get_positions, _x.info.get_currents, _x.info.get_distinct_packages, _x.info.set_commands, _x.info.set_commands_async))
      length = len(self.info.position_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.info.position_limits))
      length = len(self.info.encoder_resolutions)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.info.encoder_resolutions))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.info is None:
        self.info = qb_device_msgs.msg.Info()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.failures,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (self.info.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.serial_port = str[start:end].decode('utf-8')
      else:
        self.info.serial_port = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.info.max_repeats, _x.info.get_positions, _x.info.get_currents, _x.info.get_distinct_packages, _x.info.set_commands, _x.info.set_commands_async,) = _get_struct_i5B().unpack(str[start:end])
      self.info.get_positions = bool(self.info.get_positions)
      self.info.get_currents = bool(self.info.get_currents)
      self.info.get_distinct_packages = bool(self.info.get_distinct_packages)
      self.info.set_commands = bool(self.info.set_commands)
      self.info.set_commands_async = bool(self.info.set_commands_async)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.info.position_limits = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.info.encoder_resolutions = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.success, _x.failures))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.info.id))
      _x = self.info.serial_port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i5B().pack(_x.info.max_repeats, _x.info.get_positions, _x.info.get_currents, _x.info.get_distinct_packages, _x.info.set_commands, _x.info.set_commands_async))
      length = len(self.info.position_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.info.position_limits.tostring())
      length = len(self.info.encoder_resolutions)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.info.encoder_resolutions.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.info is None:
        self.info = qb_device_msgs.msg.Info()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.failures,) = _get_struct_Bi().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (self.info.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info.serial_port = str[start:end].decode('utf-8')
      else:
        self.info.serial_port = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.info.max_repeats, _x.info.get_positions, _x.info.get_currents, _x.info.get_distinct_packages, _x.info.set_commands, _x.info.set_commands_async,) = _get_struct_i5B().unpack(str[start:end])
      self.info.get_positions = bool(self.info.get_positions)
      self.info.get_currents = bool(self.info.get_currents)
      self.info.get_distinct_packages = bool(self.info.get_distinct_packages)
      self.info.set_commands = bool(self.info.set_commands)
      self.info.set_commands_async = bool(self.info.set_commands_async)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.info.position_limits = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.info.encoder_resolutions = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i5B = None
def _get_struct_i5B():
    global _struct_i5B
    if _struct_i5B is None:
        _struct_i5B = struct.Struct("<i5B")
    return _struct_i5B
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
class InitializeDevice(object):
  _type          = 'qb_device_srvs/InitializeDevice'
  _md5sum = '3b1457434fbd9549614ab251143a4216'
  _request_class  = InitializeDeviceRequest
  _response_class = InitializeDeviceResponse

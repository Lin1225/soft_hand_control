# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qb_device_msgs/StateStamped.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qb_device_msgs.msg
import std_msgs.msg

class StateStamped(genpy.Message):
  _md5sum = "6d5502db1c5e02c9760e14892ed57aee"
  _type = "qb_device_msgs/StateStamped"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# State message with stamped info valid for either qbhand or qbmove

std_msgs/Header header

qb_device_msgs/Info device_info

qb_device_msgs/State device_data
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: qb_device_msgs/Info
# Standard device-independent info message

int32 id
string serial_port
int32 max_repeats
bool get_positions
bool get_currents
bool get_distinct_packages
bool set_commands
bool set_commands_async
int32[] position_limits
int32[] encoder_resolutions
================================================================================
MSG: qb_device_msgs/State
# State message valid for either qbhand or qbmove

# either qbhand or qbmove:
#  - motors: position, command in [ticks], velocity in [ticks/s], effort in [mA]
qb_device_msgs/ResourceData[] actuators

# qbhand:
#  - closure: position, command in [0,1], velocity in [percent/s],  effort in [A].
# qbmove:
#  - shaft: position, command in [radians], velocity in [radians/s], effort in [A];
#  - preset: position, command in [0,1], velocity in [percent/s], effort is not used.
qb_device_msgs/ResourceData[] joints

# Reliability of the retrieved measurements
bool is_reliable
int32 consecutive_failures
================================================================================
MSG: qb_device_msgs/ResourceData
# Device-independent resource data message

string name
float64 position
float64 velocity
float64 effort
float64 command"""
  __slots__ = ['header','device_info','device_data']
  _slot_types = ['std_msgs/Header','qb_device_msgs/Info','qb_device_msgs/State']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,device_info,device_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateStamped, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.device_info is None:
        self.device_info = qb_device_msgs.msg.Info()
      if self.device_data is None:
        self.device_data = qb_device_msgs.msg.State()
    else:
      self.header = std_msgs.msg.Header()
      self.device_info = qb_device_msgs.msg.Info()
      self.device_data = qb_device_msgs.msg.State()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.device_info.id))
      _x = self.device_info.serial_port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i5B().pack(_x.device_info.max_repeats, _x.device_info.get_positions, _x.device_info.get_currents, _x.device_info.get_distinct_packages, _x.device_info.set_commands, _x.device_info.set_commands_async))
      length = len(self.device_info.position_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.device_info.position_limits))
      length = len(self.device_info.encoder_resolutions)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.device_info.encoder_resolutions))
      length = len(self.device_data.actuators)
      buff.write(_struct_I.pack(length))
      for val1 in self.device_data.actuators:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.velocity, _x.effort, _x.command))
      length = len(self.device_data.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.device_data.joints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.velocity, _x.effort, _x.command))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.device_data.is_reliable, _x.device_data.consecutive_failures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.device_info is None:
        self.device_info = qb_device_msgs.msg.Info()
      if self.device_data is None:
        self.device_data = qb_device_msgs.msg.State()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.device_info.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device_info.serial_port = str[start:end].decode('utf-8')
      else:
        self.device_info.serial_port = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.device_info.max_repeats, _x.device_info.get_positions, _x.device_info.get_currents, _x.device_info.get_distinct_packages, _x.device_info.set_commands, _x.device_info.set_commands_async,) = _get_struct_i5B().unpack(str[start:end])
      self.device_info.get_positions = bool(self.device_info.get_positions)
      self.device_info.get_currents = bool(self.device_info.get_currents)
      self.device_info.get_distinct_packages = bool(self.device_info.get_distinct_packages)
      self.device_info.set_commands = bool(self.device_info.set_commands)
      self.device_info.set_commands_async = bool(self.device_info.set_commands_async)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.device_info.position_limits = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.device_info.encoder_resolutions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.device_data.actuators = []
      for i in range(0, length):
        val1 = qb_device_msgs.msg.ResourceData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.velocity, _x.effort, _x.command,) = _get_struct_4d().unpack(str[start:end])
        self.device_data.actuators.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.device_data.joints = []
      for i in range(0, length):
        val1 = qb_device_msgs.msg.ResourceData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.velocity, _x.effort, _x.command,) = _get_struct_4d().unpack(str[start:end])
        self.device_data.joints.append(val1)
      _x = self
      start = end
      end += 5
      (_x.device_data.is_reliable, _x.device_data.consecutive_failures,) = _get_struct_Bi().unpack(str[start:end])
      self.device_data.is_reliable = bool(self.device_data.is_reliable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.device_info.id))
      _x = self.device_info.serial_port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i5B().pack(_x.device_info.max_repeats, _x.device_info.get_positions, _x.device_info.get_currents, _x.device_info.get_distinct_packages, _x.device_info.set_commands, _x.device_info.set_commands_async))
      length = len(self.device_info.position_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.device_info.position_limits.tostring())
      length = len(self.device_info.encoder_resolutions)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.device_info.encoder_resolutions.tostring())
      length = len(self.device_data.actuators)
      buff.write(_struct_I.pack(length))
      for val1 in self.device_data.actuators:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.velocity, _x.effort, _x.command))
      length = len(self.device_data.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.device_data.joints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.velocity, _x.effort, _x.command))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.device_data.is_reliable, _x.device_data.consecutive_failures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.device_info is None:
        self.device_info = qb_device_msgs.msg.Info()
      if self.device_data is None:
        self.device_data = qb_device_msgs.msg.State()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.device_info.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device_info.serial_port = str[start:end].decode('utf-8')
      else:
        self.device_info.serial_port = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.device_info.max_repeats, _x.device_info.get_positions, _x.device_info.get_currents, _x.device_info.get_distinct_packages, _x.device_info.set_commands, _x.device_info.set_commands_async,) = _get_struct_i5B().unpack(str[start:end])
      self.device_info.get_positions = bool(self.device_info.get_positions)
      self.device_info.get_currents = bool(self.device_info.get_currents)
      self.device_info.get_distinct_packages = bool(self.device_info.get_distinct_packages)
      self.device_info.set_commands = bool(self.device_info.set_commands)
      self.device_info.set_commands_async = bool(self.device_info.set_commands_async)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.device_info.position_limits = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.device_info.encoder_resolutions = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.device_data.actuators = []
      for i in range(0, length):
        val1 = qb_device_msgs.msg.ResourceData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.velocity, _x.effort, _x.command,) = _get_struct_4d().unpack(str[start:end])
        self.device_data.actuators.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.device_data.joints = []
      for i in range(0, length):
        val1 = qb_device_msgs.msg.ResourceData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.velocity, _x.effort, _x.command,) = _get_struct_4d().unpack(str[start:end])
        self.device_data.joints.append(val1)
      _x = self
      start = end
      end += 5
      (_x.device_data.is_reliable, _x.device_data.consecutive_failures,) = _get_struct_Bi().unpack(str[start:end])
      self.device_data.is_reliable = bool(self.device_data.is_reliable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i5B = None
def _get_struct_i5B():
    global _struct_i5B
    if _struct_i5B is None:
        _struct_i5B = struct.Struct("<i5B")
    return _struct_i5B
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
